#!/usr/bin/env python3
from scipy.cluster.hierarchy import linkage, ward, fcluster
from scipy.spatial.distance import squareform
import numpy as np
import os
import argparse


def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("distanceM",  help="distance matrix in tab seperate")
	parser.add_argument("--outfile", "-o", default="cluster.tab", help="output file with the cluster ids")
	parser.add_argument("--dis_threshold", "-t", default=20, help="distance threshold for clustering")
	parser.add_argument("--linkage", "-l", default="ward", choices=["ward", "complete", "average", "single"])
	args = parser.parse_args()

	if args.distanceM:
		if os.path.exists(args.distanceM):
			with open(args.distanceM,'r') as mydis:
				count = 0
				title = []
				data_matrix = []
				id_list = []
				for line in mydis:
					if count == 0:
						title = line.strip().split("\t")[1:]
						count = 1
						continue
					if len(line.strip()) > 1:
						dis_line = list(map(float, line.strip().split("\t")[1:]))
						sample_id = line.strip().split("\t")[0]
						data_matrix.append(dis_line)
						id_list.append(sample_id)
			x_matrix = np.array(data_matrix)
			#print(x_matrix)
			v = squareform(x_matrix)
			Z = linkage(v, args.linkage)
			cluster_result = list(fcluster(Z, t=args.dis_threshold, criterion="distance"))
			number_of_clusters = len(set(cluster_result))
			#number_of_clusters = clustering.n_clusters_
			#c_labels = list(clustering.labels_)
			print(f"Clustering finished, With distance Threshold as {args.dis_threshold}, there are {number_of_clusters} clusters created")
			with open(args.outfile, 'w') as myout:
				myout.write("ID\tCluster\n")
				for i in range(len(cluster_result)):
					myout.write(f"{id_list[i]}\t{cluster_result[i]}\n")
		else:
			print("Distance Matrix file does not exist")
			exit()

if __name__ == "__main__":
	main()
